import asyncio
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import dp, bot
from keyboards import kb_person, kb_answer
from parsers import parse
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from googleDisk import google
from aiogram import types
from aiogram.dispatcher import FSMContext
from handlers import search_state


@dp.message_handler(state=search_state.var_name)
async def take_first_state(message: types.Message, state: FSMContext):
    staf = google.EMPLOYEES
    name_key = message.text
    await state.finish()
    it = 0
    for staff in staf:
        s = ''
        for i in staff:
            s  += i.strip().lower() + ' '
            if s.find(name_key.lower()) != -1:
                await bot.send_message(message.from_user.id, f'–ò–º—è: {staff[1]}\n–§–∞–º–∏–ª–∏—è: {staff[0]}\n–û—Ç—á–µ—Å—Ç–≤–æ: {staff[2]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {staff[4]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7{staff[7]}\n–õ–∏—á–Ω—ã–π email: {staff[6]}\n–ö–æ–º–ø–∞–Ω–∏—è: {staff[8]}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {staff[9]}')
                await asyncio.sleep(1)
                if staff[7] != '':
                    await bot.send_contact(message.from_user.id, f'+7{staff[7]}', f'{staff[0]} {staff[1]}')
                else:
                    await bot.send_message(message.from_user.id, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞')
                await asyncio.sleep(1)
                it += 1
                break
        s = ''
    if it == 0:
        await bot.send_message(message.from_user.id, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        it = 0

async def command_person(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', reply_markup=kb_person)
    await message.delete()


@dp.message_handler(Text(equals='üîç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏'))
async def search_employees(message: types.Message):
    await search_state.var_name.name.set()
    await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9*********\n–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
    await message.delete()


@dp.message_handler(Text(equals='üà∫ –í–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏'))
async def vac(message: types.Message):
    vacancy = parse(True)
    for item in vacancy:
        await bot.send_message(message.from_user.id, item)
        await asyncio.sleep(1)
    await message.delete()

@dp.message_handler(Text(equals='üìñ –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã'))
async def business_processes(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.delete()

@dp.message_handler(Text(equals='üìà –†–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞'))
async def staff_development(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.delete()

@dp.message_handler(Text(equals='üìã –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è'))
async def reward_calculator(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.delete()

@dp.message_handler(Text(equals='üìù –õ–∏—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏'))
async def motivation_sheet(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.delete()

@dp.message_handler(Text(equals='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏'))
async def company_library(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await message.delete()
